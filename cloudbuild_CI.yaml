# Copyright 2018 Google Inc.  All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This is meant to be used by the Build Triggers set in Container Builder Builds
# of a cloud project. This is what it does:
# * Builds an image using the last GitHub commit hash as the tag.
# * Pushes that image to Container Registry.
# * Runs the integration test from that very image.

steps:
  - id: 'build-gcp-variant-transforms-docker'
    name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '--build-arg'
      - 'commit_sha=${COMMIT_SHA}'
      - '--tag=gcr.io/${PROJECT_ID}/gcp-variant-transforms:${COMMIT_SHA}'
      - '--file=docker/Dockerfile'
      - '.'
    waitFor: ['-']

  - id: 'scan-gcp-variant-transforms-docker'
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: '/bin/bash'
    args:
    - -c
    - |
      gcloud artifacts docker images scan gcr.io/${PROJECT_ID}/gcp-variant-transforms:${COMMIT_SHA} \
      --format='value(response.scan)' > /workspace/scan_id.txt
    waitFor: ['build-gcp-variant-transforms-docker']

  - id: 'severity-check-gcp-variant-transforms-docker'
    name: gcr.io/cloud-builders/gcloud
    entrypoint: '/bin/bash'
    args:
    - -c
    - |
      echo 'Scan ID:' $(cat /workspace/scan_id.txt)
      gcloud artifacts docker images list-vulnerabilities $(cat /workspace/scan_id.txt) \
      --format='value(vulnerability.effectiveSeverity)' | if grep -Fxq CRITICAL; \
      then echo 'Failed vulnerability check - CRITICAL vulnerabilities found' && exit 1; else exit 0; fi
    waitFor: ['scan-gcp-variant-transforms-docker']

  - id: 'push-gcp-variant-transforms-docker'
    name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'gcr.io/${PROJECT_ID}/gcp-variant-transforms:${COMMIT_SHA}'
    waitFor: ['severity-check-gcp-variant-transforms-docker']

# ----------------------------------------------------------------
# Custom Runner build
  - id: 'build-variant-transforms-custom-runner-docker'
    name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '--build-arg'
      - 'commit_sha=${COMMIT_SHA}'
      - '--tag=gcr.io/${PROJECT_ID}/variant-transforms-custom-runner:${COMMIT_SHA}'
      - '--file=docker/Dockerfile.custom_dataflow_container'
      - '.'
    waitFor: ['-']

  - id: 'scan-gcp-variant-transforms-custom-runner-docker'
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: '/bin/bash'
    args:
    - -c
    - |
      gcloud artifacts docker images scan gcr.io/${PROJECT_ID}/variant-transforms-custom-runner:${COMMIT_SHA} \
      --format='value(response.scan)' > /workspace/worker_scan_id.txt
    waitFor: ['build-variant-transforms-custom-runner-docker']

  - id: 'severity-check-gcp-variant-transforms-custom-runner-docker'
    name: gcr.io/cloud-builders/gcloud
    entrypoint: '/bin/bash'
    args:
    - -c
    - |
      echo 'Scan ID:' $(cat /workspace/worker_scan_id.txt)
      gcloud artifacts docker images list-vulnerabilities $(cat /workspace/worker_scan_id.txt) \
      --format='value(vulnerability.effectiveSeverity)' | if grep -Fxq CRITICAL; \
      then echo 'Failed vulnerability check - CRITICAL vulnerabilities found' && exit 1; else exit 0; fi
    waitFor: ['scan-gcp-variant-transforms-custom-runner-docker']

  - id: 'push-variant-transforms-custom-runner-docker'
    name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'gcr.io/${PROJECT_ID}/variant-transforms-custom-runner:${COMMIT_SHA}'
    waitFor: ['severity-check-gcp-variant-transforms-custom-runner-docker']

# ----------------------------------------------------------------
# Tests

  - id: 'test-gcp-variant-transforms-docker'
    name: 'gcr.io/${PROJECT_ID}/gcp-variant-transforms:${COMMIT_SHA}'
    args:
      - '--keep_image'
      - '--skip_build'
      - '--project ${PROJECT_ID}'
      - '--image_tag ${COMMIT_SHA}'
      - '--run_unit_tests'
      - '--run_preprocessor_tests'
      - '--run_bq_to_vcf_tests'
      - '--run_all_tests'
      - '--test_name_prefix cloud-ci-'
    entrypoint: '/opt/gcp_variant_transforms/src/deploy_and_run_tests.sh'

     # By default the script uses a GS bucket of gcp-variant-transforms-test
     # project. For other projects we should either use the following option
     # or change the script to create a temporary bucket on the fly.
     #
     # - '--gs_dir bashir-variant_integration_test_runs'
images:
  - 'gcr.io/${PROJECT_ID}/gcp-variant-transforms:${COMMIT_SHA}'
  - 'gcr.io/${PROJECT_ID}/variant-transforms-custom-runner:${COMMIT_SHA}'
timeout: 270m
